name: build

defaults:
  run:
    shell: bash

on:

  workflow_call:
    inputs:
      win:
        description: 'Windows Tripplet'
        default: 'x64-windows'
        required: false
        type: string
      lin:
        description: 'Linux Tripplet'
        default: 'x64-linux'
        required: false
        type: string
      osx:
        description: 'macOS Tripplet'
        default: 'x64-osx'
        required: false
        type: string

env:
  project-name: NosoCpp
  lib-name: nosocpp
  cliff-cfg: cliff.toml
  ninja: ninja-multi-vcpkg
  ninja-shared: ${{ github.workspace }}/builds/ninja-multi-vcpkg-shared
  release-shared: ${{ github.workspace }}/builds/ninja-multi-vcpkg-shared/Release
  debug-shared: ${{ github.workspace }}/builds/ninja-multi-vcpkg-shared/Debug
  ninja-static: ${{ github.workspace }}/builds/ninja-multi-vcpkg-static
  release-static: ${{ github.workspace }}/builds/ninja-multi-vcpkg-static/Release
  debug-static: ${{ github.workspace }}/builds/ninja-multi-vcpkg-static/Debug

jobs:

  build:
    name: ${{ github.workflow }}-${{ matrix.os }}
    runs-on: ${{ matrix.os }}


    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: windows-latest
            triplet: ${{ inputs.win }}
          - os: ubuntu-latest
            triplet: ${{ inputs.lin }}
          - os: macos-latest
            triplet: ${{ inputs.osx }}

    steps:
      - name: Install some needed packages on Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt update && \
          sudo apt install -y \
          "autoconf-archive"

      - name: Install some needed packages on macOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install \
          "autoconf-archive" \
          "automake"

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get latest CMake
        uses: lukka/get-cmake@latest

      - name: Restore from cache and setup vcpkg executable and data files.
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgJsonGlob: 'vcpkg.json'

      - name: (Shared) Run CMake+vcpkg+Ninja to build packages and generate/build the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ninja-multi-vcpkg-shared
          buildPreset: ninja-vcpkg-release-shared

      - name: (Shared) List the files
        run: |
          ls -alF "${{ env.ninja-shared }}"
          ls -alF "${{ env.release-shared }}"

      - name: (Shared) Packaging
        run: |
          if [ ${{ matrix.os }} == 'windows-latest' ]; then
            cpack --preset package-zip-release-shared
          elif [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            cpack --preset package-tar-gz-release-shared
            cpack --preset package-deb-release-shared
            cpack --preset package-rpm-release-shared
          elif [ ${{ matrix.os }} == 'macos-latest' ]; then
            cpack --preset package-tar-gz-release-shared
          fi

      - name: (Static) Run CMake+vcpkg+Ninja to build packages and generate/build the code.
        uses: lukka/run-cmake@v10
        with:
          configurePreset: ninja-multi-vcpkg-static
          buildPreset: ninja-vcpkg-release-static

      - name: (Static) List the files
        run: |
          ls -alF "${{ env.ninja-static }}"
          ls -alF "${{ env.release-static }}"

      - name: (Static) Packaging
        run: |
          if [ ${{ matrix.os }} == 'windows-latest' ]; then
            cpack --preset package-zip-release-static
          elif [ ${{ matrix.os }} == 'ubuntu-latest' ]; then
            cpack --preset package-tar-gz-release-static
            cpack --preset package-deb-release-static
            cpack --preset package-rpm-release-static
          elif [ ${{ matrix.os }} == 'macos-latest' ]; then
            cpack --preset package-tar-gz-release-static
          fi

      - name: Generate lib prefix
        run: |
          (
            if [ ${{ matrix.os }} == "ubuntu-latest" ] ||  [ ${{ matrix.os }} == "macos-latest" ]
            then
              echo "lib-prefix=lib"
            else
              echo "lib-prefix="
            fi
          ) >> "$GITHUB_ENV"

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.project-name }}-${{ matrix.triplet }}
          path: |
            ${{ env.ninja-shared }}/${{ env.lib-prefix }}${{ env.lib-name }}-*
            ${{ env.ninja-static }}/${{ env.lib-prefix }}${{ env.lib-name }}-*

  package-release:
    if: contains(github.ref, '/tags/')

    name: Package and create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set output
        id: vars
        run: echo "tag=${{ github.ref_name }}" >> "$GITHUB_ENV"

      - name: Download the Release binary
        uses: actions/download-artifact@v3

      - name: List files
        run: |
          ls -alF "${{ env.project-name }}-${{ inputs.win }}"
          ls -alF "${{ env.project-name }}-${{ inputs.lin }}"
          ls -alF "${{ env.project-name }}-${{ inputs.osx }}"

      - name: Generate Release Notes
        id: git-cliff
        uses: orhun/git-cliff-action@v2
        with:
          config: ${{ env.cliff-cfg }}
          args: --latest --strip header
        env:
          OUTPUT: CHANGES.md

      - name: Create GitHub release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ env.project-name }} ${{ env.tag }}
          body: ${{ steps.git-cliff.outputs.content }}
          files: |
            ${{ env.project-name }}-${{ inputs.win }}/${{ env.ninja }}-shared/*.zip
            ${{ env.project-name }}-${{ inputs.win }}/${{ env.ninja }}-static/*.zip
            ${{ env.project-name }}-${{ inputs.lin }}/${{ env.ninja }}-shared/*.tar.gz
            ${{ env.project-name }}-${{ inputs.lin }}/${{ env.ninja }}-static/*.tar.gz
            ${{ env.project-name }}-${{ inputs.lin }}/${{ env.ninja }}-shared/*.deb
            ${{ env.project-name }}-${{ inputs.lin }}/${{ env.ninja }}-static/*.deb
            ${{ env.project-name }}-${{ inputs.lin }}/${{ env.ninja }}-shared/*.rpm
            ${{ env.project-name }}-${{ inputs.lin }}/${{ env.ninja }}-static/*.rpm
            ${{ env.project-name }}-${{ inputs.osx }}/${{ env.ninja }}-shared/*.tar.gz
            ${{ env.project-name }}-${{ inputs.osx }}/${{ env.ninja }}-static/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
